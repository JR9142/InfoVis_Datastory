Traceback (most recent call last):
  File "/home/chris/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/chris/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/chris/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/home/chris/miniconda3/envs/jupyterbook/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/home/chris/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/chris/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/chris/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.io as pio
import pycountry

pio.renderers.default = 'notebook'

# === Load GINI Data ===
gini_df = pd.read_csv("gini_definitive.csv")
gini_df['Year'] = gini_df['Year'].astype(int)

# === Load Theft Data ===
theft_df = pd.read_csv("europe_crime_definitive_absolute.csv")
theft_df.rename(columns={'geo': 'Country Code', 'TIME_PERIOD': 'Year'}, inplace=True)

# Convert ISO-2 to ISO-3
def convert_iso2_to_iso3(code):
    try:
        return pycountry.countries.get(alpha_2=code).alpha_3
    except:
        return None

theft_df['Country Code'] = theft_df['Country Code'].apply(convert_iso2_to_iso3)

# Manual fixes for special regions/countries
manual_fix = {
    'England and Wales': 'GBR',
    'Northern Ireland (UK) (NUTS 2021)': 'GBR',
    'Scotland (NUTS 2021)': 'GBR',
    'Greece': 'GRC',
    'Kosovo*': 'XKX'
}

theft_df['Country Code'] = theft_df.apply(
    lambda row: manual_fix[row['Geopolitical entity (reporting)']] 
    if pd.isnull(row['Country Code']) and row['Geopolitical entity (reporting)'] in manual_fix
    else row['Country Code'],
    axis=1
)

theft_df['Year'] = theft_df['Year'].astype(int)
theft_df['Theft'] = pd.to_numeric(theft_df['Theft'], errors='coerce').fillna(0)

# === Years intersection and max year 2022 ===
years = sorted(list(set(gini_df['Year']).intersection(set(theft_df['Year']))))
years = [year for year in years if year <= 2022]

# Create subplot
fig = make_subplots(
    rows=1, cols=2,
    specs=[[{'type': 'choropleth'}, {'type': 'choropleth'}]],
    subplot_titles=('GINI Index', 'Theft Incidents')
)

# Define color scales
gini_min, gini_max = gini_df['Value'].min(), gini_df['Value'].max()
theft_min, theft_max = theft_df['Theft'].min(), theft_df['Theft'].max()

# Add base traces (Year = first year)
fig.add_trace(
    go.Choropleth(
        locations=gini_df[gini_df['Year'] == years[0]]['Country Code'],
        z=gini_df[gini_df['Year'] == years[0]]['Value'],
        text=gini_df[gini_df['Year'] == years[0]]['Country Name'],
        colorscale='Viridis',
        zmin=gini_min,
        zmax=gini_max,
        colorbar=dict(title='GINI', x=0.45)  # position colorbar left
    ),
    row=1, col=1
)

fig.add_trace(
    go.Choropleth(
        locations=theft_df[theft_df['Year'] == years[0]]['Country Code'],
        z=theft_df[theft_df['Year'] == years[0]]['Theft'],
        text=theft_df[theft_df['Year'] == years[0]]['Geopolitical entity (reporting)'],
        colorscale='Reds',
        zmin=theft_min,
        zmax=theft_max,
        colorbar=dict(title='Theft', x=1.0)  # position colorbar right
    ),
    row=1, col=2
)

# Animation frames
frames = []
for year in years:
    frame = go.Frame(
        data=[
            go.Choropleth(
                locations=gini_df[gini_df['Year'] == year]['Country Code'],
                z=gini_df[gini_df['Year'] == year]['Value'],
                text=gini_df[gini_df['Year'] == year]['Country Name']
            ),
            go.Choropleth(
                locations=theft_df[theft_df['Year'] == year]['Country Code'],
                z=theft_df[theft_df['Year'] == year]['Theft'],
                text=theft_df[theft_df['Year'] == year]['Geopolitical entity (reporting)']
            )
        ],
        name=str(year)
    )
    frames.append(frame)

# Update layout
fig.update_layout(
    title_text='GINI Index and Theft Incidents in Europe per Year',
    title_x=0.5,
    geo=dict(
        showframe=False,
        showcoastlines=True,
        lataxis_range=[30, 72],
        lonaxis_range=[-25, 45],
        projection_type='natural earth'
    ),
    geo2=dict(  # for the 2nd map
        showframe=False,
        showcoastlines=True,
        lataxis_range=[30, 72],
        lonaxis_range=[-25, 45],
        projection_type='natural earth'
    ),
    sliders=[{
        "steps": [{
            "args": [[str(year)], {"frame": {"duration": 500, "redraw": True}, "mode": "immediate"}],
            "label": str(year),
            "method": "animate"
        } for year in years],
        "transition": {"duration": 300},
        "x": 0.1,
        "len": 0.8
    }],
    updatemenus=[{
        "buttons": [{
            "args": [None, {"frame": {"duration": 500, "redraw": True}, "fromcurrent": True}],
            "label": "Play",
            "method": "animate"
        }, {
            "args": [[None], {"frame": {"duration": 0}, "mode": "immediate"}],
            "label": "Pause",
            "method": "animate"
        }],
        "direction": "left",
        "pad": {"r": 10, "t": 70},
        "showactive": False,
        "type": "buttons",
        "x": 0.1,
        "xanchor": "right",
        "y": 0,
        "yanchor": "top"
    }]
)

fig.frames = frames

fig.show()

------------------


[31m---------------------------------------------------------------------------[39m
[31mModuleNotFoundError[39m                       Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[5][39m[32m, line 6[39m
[32m      4[39m [38;5;28;01mfrom[39;00m[38;5;250m [39m[34;01mplotly[39;00m[34;01m.[39;00m[34;01msubplots[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m make_subplots
[32m      5[39m [38;5;28;01mimport[39;00m[38;5;250m [39m[34;01mplotly[39;00m[34;01m.[39;00m[34;01mio[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[34;01mpio[39;00m
[32m----> [39m[32m6[39m [38;5;28;01mimport[39;00m[38;5;250m [39m[34;01mpycountry[39;00m
[32m      8[39m pio.renderers.default = [33m'[39m[33mnotebook[39m[33m'[39m
[32m     10[39m [38;5;66;03m# === Load GINI Data ===[39;00m

[31mModuleNotFoundError[39m: No module named 'pycountry'

